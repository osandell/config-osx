{
  "security.workspace.trust.untrustedFiles": "open",
  "editor.formatOnSave": true,
  "files.insertFinalNewline": true,
  "editor.renderWhitespace": "all",
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
  },
  "gitlens.views.branches.files.compact": false,
  "explorer.confirmDelete": false,
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "explorer.confirmDragAndDrop": false,
  "explorer.compactFolders": false,
  "editor.fontFamily": "Powerline Consolas",
  "editor.fontSize": 15,
  "terminal.integrated.fontSize": 15,
  "terminal.integrated.minimumContrastRatio": 1,

  "workbench.startupEditor": "none",
  "workbench.colorTheme": "Default Light+",
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // get rid of 'abc' search suggstions
  "editor.suggest.showWords": false,

  "editor.acceptSuggestionOnEnter": "off",

  "terminal.integrated.scrollback": 10000,

  // Highlight search patterns
  "vim.hlsearch": true,

  "vim.smartRelativeLine": true,
  "vim.gdefault": false,
  "vim.sneak": true,
  "vim.easymotion": true,
  "vim.leader": "<Space>",
  "vim.useSystemClipboard": true,
  "vim.surround": true,
  // "vim.mouseSelectionGoesIntoVisualMode": false,

  // Prevent leaving insert mode when copying text with command-c
  "vim.handleKeys": {
    "<D-c>": false
  },

  "vim.normalModeKeyBindingsNonRecursive": [
    // go up / down 5 lines
    {
      "before": ["<C-k>"],
      "after": ["5", "k"]
    },
    {
      "before": ["<C-j>"],
      "after": ["5", "j"]
    },

    // go up / down half a page
    {
      "before": ["K"],
      "after": ["<C-u>"]
    },
    {
      "before": ["J"],
      "after": ["<C-d>"]
    },

    // Copy to the 0 registry instead of default clipboard when pressing d
    {
      "before": ["d"],
      "after": ["\"", "0", "d"]
    },
    {
      "before": ["D"],
      "after": ["\"", "0", "D"]
    },

    // Copy to default clipboard
    {
      "before": ["<Leader>", "d"],
      "after": ["d"]
    },
    {
      "before": ["<Leader>", "D"],
      "after": ["D"]
    },

    {
      "before": ["c"],
      "after": ["\"", "0", "c"]
    },
    {
      "before": ["<Leader>", "c"],
      "after": ["c"]
    },

    {
      "before": ["x"],
      "after": ["\"", "0", "x"]
    },
    {
      "before": ["<Leader>", "x"],
      "after": ["x"]
    },

    // Concatinate lines
    {
      "before": ["<Leader>", "j"],
      "after": ["J"]
    },

    // reverse ; and , for easier sneak navigation
    {
      "before": [","],
      "after": [";"]
    },
    {
      "before": [";"],
      "after": [","]
    },

    // Clear last search highlighting
    {
      "before": ["<Leader>", "/"],
      "commands": [":noh"]
    },

    // New line without going to insert mode
    {
      "before": ["<Leader>", "o"],
      "after": ["o", "<Esc>"]
    },
    {
      "before": ["<Leader>", "O"],
      "after": ["O", "<Esc>"]
    },

    {
      "before": ["<Leader>", "G"],
      "commands": ["editor.action.revealDefinition"]
    },

    // Shift + Y to yant until end of line
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },

    // u  will be same as ctrl-z
    {
      "before": ["u"],
      "commands": ["undo"]
    },

    // Log to console without variable (javascript)
    {
      "before": ["˝"],
      "after": ["d", "d", "O", "<Esc>", "o", "<Esc>"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$1console.log(\"\\x1b[8m\\x1b[40m\\x1b[0m\\x1b[7m%c    $CLIPBOARD    \\x1b[8m\\x1b[40m\\x1b[0m\\n\", 'color: white; background: black; font-weight: bold', $CLIPBOARD);"
          }
        },
        {
          "command": "workbench.action.files.save"
        }
      ]
    },
    // Log to console with variable (javascript)
    {
      "before": ["°"],
      "after": ["d", "d", "O", "<Esc>", "o", "<Esc>"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$1console.log(\"\\x1b[8m\\x1b[40m\\x1b[0m\\x1b[7m%c    $CLIPBOARD    \\x1b[8m\\x1b[40m\\x1b[0m\\n\", 'color: white; background: black; font-weight: bold');"
          }
        },
        {
          "command": "workbench.action.files.save"
        }
      ]
    },
    // Log word to console (javascript)
    {
      "before": ["<leader>", "w"],
      "after": ["y", "i", "w", "<Esc>", "o"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$1console.log(\"\\x1b[8m\\x1b[40m\\x1b[0m\\x1b[7m%c    $CLIPBOARD    \\x1b[8m\\x1b[40m\\x1b[0m\\n\", 'color: white; background: black; font-weight: bold', $CLIPBOARD);"
          }
        },
        {
          "command": "workbench.action.files.save"
        }
      ]
    },

    // add {} + return to a return statement in javascript
    {
      "before": ["<leader>", "e"],
      "after": [
        "<plugys>",
        "a",
        "(",
        "{",
        "a",
        "<Enter>",
        "<Enter>",
        "<Enter>",
        "r",
        "e",
        "t",
        "u",
        "r",
        "n",
        "<Esc>",
        "k",
        "k",
        "i"
      ]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // Copy to the 0 registry instead of default clipboard when pressing d
    {
      "before": ["d"],
      "after": ["\"", "0", "d"]
    },

    // Copy to default clipboard
    {
      "before": ["<Leader>", "d"],
      "after": ["d"]
    },

    {
      "before": ["c"],
      "after": ["\"", "0", "c"]
    },
    {
      "before": ["<Leader>", "c"],
      "after": ["c"]
    },

    {
      "before": ["x"],
      "after": ["\"", "0", "x"]
    },
    {
      "before": ["<Leader>", "x"],
      "after": ["x"]
    },

    // Copy to the 0 registry when pasting and collect what to paste from the
    // default clipboard
    {
      "before": ["p"],
      "after": ["\"", "0", "d", "P"]
    },

    // Go to insert mode when pressing i
    {
      "before": ["i"],
      "after": ["<Esc>", "i"]
    }
  ],

  "vim.insertModeKeyBindingsNonRecursive": [
    // go up / down 5 lines
    {
      "before": ["<C-k>"],
      "after": ["<Esc>", "5", "k", "i"]
    },
    {
      "before": ["<C-j>"],
      "after": ["<Esc>", "5", "j", "i"]
    },

    // Log to console without variable (javascript)
    {
      "before": ["˝"],
      "after": ["<Esc>", "d", "d", "O", "<Esc>", "o", "<Esc>"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$1console.log(\"\\x1b[8m\\x1b[40m\\x1b[0m\\x1b[7m%c    $CLIPBOARD    \\x1b[8m\\x1b[40m\\x1b[0m\\n\", 'color: white; background: black; font-weight: bold', $CLIPBOARD);"
          }
        },
        {
          "command": "workbench.action.files.save"
        }
      ]
    },
    // Log to console with variable (javascript)
    {
      "before": ["°"],
      "after": ["<Esc>", "d", "d", "O", "<Esc>", "o", "<Esc>"],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "$1console.log(\"\\x1b[8m\\x1b[40m\\x1b[0m\\x1b[7m%c    $CLIPBOARD    \\x1b[8m\\x1b[40m\\x1b[0m\\n\", 'color: white; background: black; font-weight: bold');"
          }
        },
        {
          "command": "workbench.action.files.save"
        }
      ]
    }
  ],

  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.tabCompletion": "on",
  "tabnine.experimentalAutoImports": true,
  "git-graph.repository.commits.fetchAvatars": true,
  "[markdown]": {
    "editor.formatOnSave": false
  },
  "git.enableSmartCommit": true,
  "editor.inlineSuggest.enabled": true,
  "diffEditor.ignoreTrimWhitespace": false
}
