
;; !  | mandatory - this modifier HAS to be pressed for binding to be valid
;; !! | mandatory command + control + optional + shift (hyper)
;; #  | optional - binding will be valid also if a specified modifier is pressed simultaniously
;;    | For example: ':#Ca :b' will bind a to b if a is pressed alone, or if a is pressed together with Command
;; ## | optional any - binding will be valid also if any modifier is pressed simultaniously
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;; 
;; Example how to map both ALONE and DOUBLE to the same button with custom delay setting. In the example we can also alternate between two apps when single pressing:
;;  {:des "Left Command + 2 ALONE: activate VSCode | DOUBLE: activate iTerm and Fork"
;;             :rules [:vscode
;;             [:!T2 ["osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'" ["lctrl_2_twice" 0]] ["lctrl_2_twice" 1]]
;;             [:!T2 ["lctrl_2_twice" 1] ["lctrl_2_twice" 0]
;;             {:delayed {:invoked ["osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'" ["lctrl_2_twice" 0]] :canceled ["lctrl_2_twice" 0]} :params {:delay 200} }]]}
;; 
;;    {:des "Left Command + 2 ALONE: activate VSCode | DOUBLE: activate iTerm and Fork"
;;             :rules [
;;             [:!T2 ["osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'" ["lctrl_2_twice" 0]] ["lctrl_2_twice" 1]]
;;             [:!T2 ["lctrl_2_twice" 1] ["lctrl_2_twice" 0]
;;             {:delayed {:invoked ["osascript -e 'tell application \"Code\" to activate'" ["lctrl_2_twice" 0]] :canceled ["lctrl_2_twice" 0]} :params {:delay 200} }]]}

;; Define different kinds of keyboards
{
:devices {
      ;; Internal MacBook Pro 16" 2021 keyboard
      :kb-macbook [{:vendor_id 1452, :product_id 832 }]

      ;; Logitech K860 Ergo keyboard
      :kb-logitech-k860 [{:vendor_id 1133, :product_id 45913 }]
}

;; Make key bindings valid only in specified applications
:applications {
      :chrome ["com.google.Chrome"]
      :edge ["com.microsoft.edgemac"]
      :fork ["com.DanPristupov.Fork"]
      :iterm ["com.googlecode.iterm2"]
      :parallels ["com.parallels"]
      :remote-desktop ["com.microsoft.rdc.macos"]
      :slack ["com.tinyspeck.slackmacgap"]
      :vscode ["com.vscodium"]

}

:profiles  {:Default {:default true :sim 50 :delay 500 :alone 500 :held 500}}


:layers {
      :q-mode {:key :q} 
      ;; :f-mode {:key :f :condi [["d-mode" 0] ["j-mode" 0] ["k-mode" 0]]} 
      ;; :j-mode {:key :j :condi [["d-mode" 0] ["f-mode" 0] ["k-mode" 0]]} 
      ;; :d-mode {:key :d :condi [["f-mode" 0] ["j-mode" 0] ["k-mode" 0]]} 
      ;; :k-mode {:key :k :condi [["d-mode" 0] ["f-mode" 0] ["j-mode" 0]]} 
}



;; :simlayers {
      ;; :d-mode {:key :d}
;; }


:main [
           

;;       {:des "Hold D to simulate shift"
;;             :rules [:d-mode 
;;                   [:q :!Sq]     
;;                   [:w :!Sw]  
;;                   [:e :!Se]
;;                   [:r :!Sr]  
;;                   [:t :!St]
;;                   [:a :!Sa] 
;;                   [:s :!Ss] 
;;                   [:d :!Sd]
;;                   [:g :!Sg]
;;                   [:z :!Sz]
;;                   [:x :!Sx]
;;                   [:c :!Sc]
;;                   [:v :!Sv] 
;;                   [:b :!Sb] 
;;                   [:y :!Sy]     
;;                   [:u :!Su]  
;;                   [:i :!Si]
;;                   [:o :!So]  
;;                   [:p :!Sp]
;;                   [:open_bracket :!Sopen_bracket ] 
;;                   [:h :!Sh] 
;;                   [:j :!Sj]
;;                   [:k :!Sk] 
;;                   [:l :!Sl]
;;                   [:semicolon :!Ssemicolon]
;;                   [:quote :!Squote]
;;                   [:n :!Sn]
;;                   [:m :!Sm] 
;;     ]}

;;       {:des "Hold K to simulate shift"
;;             :rules [:k-mode
;;                   [:q :!Sq]     
;;                   [:w :!Sw]  
;;                   [:e :!Se]
;;                   [:r :!Sr]  
;;                   [:t :!St]
;;                   [:a :!Sa] 
;;                   [:s :!Ss] 
;;                   [:d :!Sd]
;;                   [:f :!Sf] 
;;                   [:g :!Sg]
;;                   [:z :!Sz]
;;                   [:x :!Sx]
;;                   [:c :!Sc]
;;                   [:v :!Sv] 
;;                   [:b :!Sb] 
;;                   [:y :!Sy]     
;;                   [:u :!Su]  
;;                   [:i :!Si]
;;                   [:o :!So]  
;;                   [:p :!Sp]
;;                   [:open_bracket :!Sopen_bracket ] 
;;                   [:h :!Sh] 
;;                   [:k :!Sk] 
;;                   [:l :!Sl]
;;                   [:semicolon :!Ssemicolon]
;;                   [:quote :!Squote]
;;                   [:n :!Sn]
;;                   [:m :!Sm] 
;;     ]}

    

;;        {:des "Hold F for various hotkeys"
;;         :rules [:f-mode

;;           [  :h :left_arrow   ]     
;;               [:j :down_arrow  ]
;;              [:k :up_arrow]  
;;               [:l :right_arrow]  
;;     ]}


      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Bindings for specific keyboards
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      ; MacBook Pro internal keyboard    
      {:des "Fn to Left Command"
            :rules [:kb-macbook :!parallels[:fn :left_command]]}
      {:des "Fn + Left Control to Fn"
              :rules[:kb-macbook[:!Cleft_control :fn]]}
      {:des "Fn + Left Control to Fn"
              :rules[:kb-macbook[:!Tfn :fn]]}
      {:des "Left Control to Enter"
             :rules [:kb-macbook[:left_control :left_control nil {:alone :return_or_enter}]]}

      ; Logitech K860
      ;; {:des "Media key with 3 squares to mission control"
      ;;       :rules[:kb-logitech-k860[:!Cup_arrow :!Tup_arrow]]}
      ;; {:des "Show desktop media key (require changing hotkey in mac system settings). Not supposed to work when
      ;;       Caps Lock is active so that we can use the f11 key in Chrome debug tool."
      ;;       :rules[:kb-logitech-k860[:f11 :!TSOd]]}
      ;; {:des "Left Command to Left Command"
      ;;       :rules [:kb-logitech-k860 [:##left_control :left_command]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Media + Brighness Control
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Shift + Left to rewind media" :rules
            [[:!Rleft_arrow "osascript ~/dev/osandell/scripts-osx/media-playback-control/rewind.applescript"]]
      }
      {:des "Right Shift + Right to fast forward media" :rules
            [[:!Rright_arrow "osascript ~/dev/osandell/scripts-osx/media-playback-control/forward.applescript"]]
      }
      {:des "Right Shift + Up to raise volume" 
            :rules [[:!Rup_arrow :volume_increment]]}
      {:des "Right Shift + Down to lower volume" 
            :rules [[:!Rdown_arrow :volume_decrement]]
      }
      ;; {:des "Right Shift + - to play / pause media"
      ;;       :rules [[:!Rslash "osascript ~/dev/osandell/scripts-osx/media-playback-control/play_pause.applescript"]]}

      {:des "Left Shift + Up to increase brighness"
            :rules [[:!Sup_arrow :display_brightness_increment]]}
      {:des "Left Shift + Down to decrease brightness" 
            :rules [[:!Sdown_arrow :display_brightness_decrement]]
      }

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Focus To-Do
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Command + Left Shift + p to play / pause | skip in Focus-to-do"
            :rules [:!parallels[:!TSp nil nil {:alone "osascript ~/dev/osandell/scripts-osx/focus-to-do/pause.applescript"
            :held "osascript ~/dev/osandell/scripts-osx/focus-to-do/next.applescript"}]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Notification center
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Tab + r to close all notifications | snooze 1 notification"
            :rules[[:!Wr nil nil {:alone "osascript ~/dev/osandell/scripts-osx/notification-center/close-notifications.applescript"
            :held "osascript ~/dev/osandell/scripts-osx/notification-center/snooze-notification.applescript"}]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Remote Desktop
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Make modifier keys work properly on remote desktop"
            :rules [:remote-desktop[:left_command :left_control] [:left_control :left_command]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Parallels Desktop
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Tweak modifier keys to work smoothly on Window"
            :rules [:parallels[:left_option :left_command] 
                   [:fn :left_control]
                   [:left_command :right_option nil {:alone :left_option}]
                   [:right_command :right_option]
                   ]}

      {:des "Caps Lock to Right Command (WIN in Windows)"
            :rules [:parallels[:caps_lock :right_control]]}
      
      {:des "Make Left Alt act as Left Alt (not Right Alt) when pressing up/down key to be able to map it in VSCode"
            :rules [:parallels[:!Eup_arrow :!Oup_arrow] [:!Edown_arrow :!Odown_arrow] 
            [:!ESup_arrow :!OSup_arrow] [:!ESdown_arrow [:!OSdown_arrow ]]]}

      ;; This way we can use Caps Lock + e.g E to get to the Mac Dev Browser 
      {:des "Left Command + Q: activate Google Chrome Grebban"
            :rules [:parallels[:!Wq "osascript -e 'tell application \"Google Chrome Grebban\" to activate'"]]}
      {:des "Left Command + 1: activate Google Chrome Personal"
            :rules [:parallels[:!W1 "osascript -e 'tell application \"Google Chrome Personal\" to activate'"]]}
      {:des "Left Command + 2: activate iTerm + Fork"
            :rules [:parallels[:!W2 "osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'"]]}
      {:des "Left Command + e: activate Google Chrome Dev"
            :rules [:parallels[:!We "osascript -e 'tell application \"Google Chrome Dev\" to activate'"]]}
      {:des "Left Command + 3: activate Slack"
            :rules [:parallels[:!W3 "osascript -e 'tell application \"Slack\" to activate'"]]}
      {:des "Left Command + 4: activate Google Chrome YouTube"
            :rules [:parallels[:!W4"osascript -e 'tell application \"Google Chrome YouTube\" to activate'"]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Google Chrome
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Command + o to enter url in address bar"
            :rules [:chrome[:!To :!Cl]]}

      {:des "Tab + 1 to duplicate tab"
            :rules [:chrome[:!Thyphen "osascript ~/dev/osandell/scripts-osx/chrome/duplicate-tab.applescript"]]}
            
      ;; For notion.so
      {:des "Tab + b to make text bold"
            :rules [:chrome[:!Wb :!Cb]]}
      {:des "Tab + i to make text italic"
            :rules [:chrome[:!Wi :!Ci]]}
      {:des "Tab + u to underline text"
            :rules [:chrome[:!Wu :!Cu]]}
      {:des "Tab + m to highlight text"
            :rules [:chrome[:!Wm :!Ce]]}
      {:des "Tab + c to create code block"
            :rules [:chrome[:!Wc [:!S7 :c :o :d :e :return_or_enter ]]]}
            
      {:des "Tab + e to hard reload"
            :rules [:chrome[:!Tx :!CSa]]}
            
      {:des "Right Option + Right Shift + t to open Toggl tab"
            :rules [:chrome[:!ERt "osascript ~/dev/osandell/scripts-osx/chrome/toggl.applescript"]]}

      {:des "Right Option + Right Shift + n to open Notion tab"
            :rules [:chrome[:!ERn "osascript ~/dev/osandell/scripts-osx/chrome/notion.applescript"]]}

      {:des "Right Option + Right Shift + j to open Jira tab"
            :rules [:chrome[:!ERj "osascript ~/dev/osandell/scripts-osx/chrome/jira.applescript"]]}

      {:des "Right Option + Right Shift + b to open Bitbucket tab"
            :rules [:chrome[:!ERb "osascript ~/dev/osandell/scripts-osx/chrome/bitbucket.applescript"]]}

      {:des "Right Option + Right Shift + a to open Azure tab"
            :rules [:chrome[:!ERa "osascript ~/dev/osandell/scripts-osx/chrome/azure.applescript"]]}

      {:des "Right Option + Right Shift + c to open calendar tab"
            :rules [:chrome[:!ERc "osascript ~/dev/osandell/scripts-osx/chrome/calendar.applescript"]]}

      {:des "Right Option + Right Shift + m to open mail tab"
            :rules [:chrome[:!ERm "osascript ~/dev/osandell/scripts-osx/chrome/mail.applescript"]]}

      {:des "Tab + n to switch to prev developer pane"
            :rules [:chrome[:!Wn :!Copen_bracket]]}
   
      {:des "Tab + . to switch to next developer pane"
            :rules [:chrome[:!Wperiod :!Cgrave_accent_and_tilde]]}

      {:des "Left Command + i to toggle inspector"
            :rules [:chrome[:!CTOsemicolon :!CEsemicolon]]}

      {:des "Left Command + m to toggle desktop / mobile"
            :rules [:chrome[:!Tm [:!CSc :!CSc :!CSm]]]}

      {:des "Left Command + c to toggle element inspector"
            :rules [:chrome[:!Tc :!CSc]]}

      {:des "Right Option + Right Shift + d to focus dev tools"
            :rules [:chrome[:!ERd [:!CSc :!CSc]]]}

      {:des "Right Option + Right Shift + v to focus viewport"
            :rules [:chrome[:!ERv [:!Cl :!COdown_arrow]]]}

      {:des "Left Option + Tab to alternate between 2 tabs (need Recent Tabs extension)"
            :rules [:chrome[:!Otab :!Tq]]}

      {:des "Left Command + Left Shift + J to switch javascrtipt on / off"
            :rules [:chrome[:!SCj [:!SO1 :!Cr]]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Slack
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Command + F to open Grebban workspace"
            :rules [:slack[:!CTOf :!C1]]}

      {:des "Right Command + A to open Royal workspace"
            :rules [:slack[:!CTOa :!C2]]}

      {:des "Right Command + S to open SEO workspace"
            :rules [:slack[:!CTOs :!C3]]}

      {:des "Left Command + Tab to find channel"
            :rules [:slack[:!Ttab :!Ck]]}

        
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; VSCode
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Command + Caps Lock + x to run last used terminal command"
            :rules [:vscode[:!TOx nil nil {:alone "osascript ~/dev/osandell/scripts-osx/vscode/rerun-last-command.applescript"
            :held "osascript ~/dev/osandell/scripts-osx/vscode/rerun-second-last-command.applescript"}]]}
      {:des "Left Command + x to reload Chrome Dev"
            :rules [:vscode[:!Tx "osascript -e '
            tell application \"Google Chrome Dev\" to activate
            delay 0.5
            tell application \"System Events\" to key code 15 using {command down, shift down}
            '"]]}

      {:des "Tab + w / e to Switch tab"
            :rules [:vscode[:!Ww :!COleft_arrow] :vscode[:!We :!COright_arrow]]} 

      ; For the following 2 definitions to work I've also mapped ° and ˝ to
      ; melodies in VSCode VIM.
      {:des "Left Command + . to console log without variable"
            :rules [:vscode[:!Tperiod :!SEq]]}
      {:des "Left Command + , to console log with variable"
            :rules [:vscode[:!Tcomma :!SEw]]}
      {:des "Right Command + s to stage selected area"
            :rules [:vscode[:!CTOs [:!Cm :!COs]]]}
      {:des "Right Command + r to revert selected changes"
            :rules [:vscode[:!CTOa [:!Cm :!Ca]]]}
      {:des "Left Command + 2 to Close all tab if held / Close current tab if tapped"
            :rules [:vscode[:!T2 nil nil {:alone :!Cq
            :held [ :!Cm :!Cq]}]]}
      {:des "Left Command + Z to terminate process"
            :rules [:vscode[:!Tz "osascript -e '
            tell application \"System Events\" to key code 6 using control down
            delay 0.5
            tell application \"System Events\" to key code 6 using control down
            '"]]}
      {:des "Right Command + ä to searh for file"
            :rules [:vscode[:!CTOquote :!Tquote]]} 
  
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; iTerm
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Tab + K / J to focus split pane above / below"
            :rules [:iterm[:!Wk :!OCup_arrow] [:!Wj :!OCdown_arrow]]}

      ;; At first I remapped keypad 7 and 8 to [ and ] and remapped Left Command + H /
      ;; L to keypad 7 and 8. It worked fine for iTerm, however for some strange
      ;; reason I couln't get it to work in Chrome when focusing tabs in the dev tools
      ;; pane to the left / right. I had to revert to remapping < key on the SE
      ;; keyboard to ] again for it to work in Chrome. Not sure why that is. It's also
      ;; strange that a reverse problem occurs in iTerm. Here I can't use the Å button
      ;; on the SE keyboard for moving to the left in iTerm, despite this key
      ;; registering as "open_bracket" in Karabiner Event Listener and it works as
      ;; expected in Chrome. So what I've ended up with is a remap of the < key to ]
      ;; for it to work in Chrome, and I've remapped keypad_7 to [ and keypad_8 to ]
      ;; for it to work in iTerm. Not very consistent but at least it works.
      {:des "Tab + H / L to focus tab to the left / right"
            :rules [:iterm[:!Wh [:!SCkeypad_7 "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 48 using {control down, shift down}
            tell application \"iTerm\" to activate
            '"]] 
            [:!Wl [:!SCgrave_accent_and_tilde "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 48 using control down
            tell application \"iTerm\" to activate
            '"]]]}
      {:des "Keypad 7 to 7 in order for it to work as expected, given the Ukelele remap explained above"
            :rules [[:keypad_7 :7]]}
      {:des "Left Command + Shift + J / K to move down / up in Fork"
            :rules [:iterm [:!TSj "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 125
            tell application \"iTerm\" to activate
            '"] 
            [:!TSk "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 126
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Shift + Right Option + I to view branch info in Fork"
            :rules [:iterm[:!ERi "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 18 using {command down, option down}
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Shift + Right Option + C to view branch changes in Fork"
            :rules [:iterm[:!ERc "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 19 using {command down, option down}
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Shift + Right Option + F to view branch file tree in Fork"
            :rules [:iterm [:!ERf "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 20 using {command down, option down}
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Tab + - to split horizontally"
            :rules [:iterm[:!Wslash :!SCd]]}
      {:des "Tab + t to open new tab and split horizontally"
            :rules [:iterm[:!Wt [:!Ct :!SCd "osascript -e '
           tell application \"System Events\" to key code 126 using {command down, option down}
            '"]]]}
      {:des "Command + 2 to close tab group"
            :rules [:iterm[:!T2 [:!T2 :!T2 "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 13 using {command down}
            tell application \"iTerm\" to activate
            '"]]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Fork
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Tab + H / L to focus tab to the left / right"
            :rules [:fork [:!Th [:!STtab "osascript -e '
            tell application \"iTerm\" to activate
            tell application \"System Events\" to key code 89 using {command down, shift down}
            tell application \"Fork\" to activate
            '"]] 
            [:!Tl [:!Ttab "osascript -e '
            tell application \"iTerm\" to activate
            tell application \"System Events\" to key code 50 using {command down, shift down}
            tell application \"Fork\" to activate
            '"]]]}
      {:des "Left Command + J / K to move down / up"
            :rules [:fork [:!Tj [:down_arrow "osascript -e '
            tell application \"iTerm\" to activate
            '"]] 
            [:!Tk [:up_arrow "osascript -e '
            tell application \"iTerm\" to activate
            '"]]]} 
      {:des "Right Shift + Right Option + I to view branch info"
            :rules [:fork [:!ERi :!CO1]]}
      {:des "Right Shift + Right Option + C to view branch changes"
            :rules [:fork [:!ERc :!CO2]]}
      {:des "Right Shift + Right Option + F to view branch file tree"
            :rules [:fork [:!ERf :!CO3]]}
      {:des "Left Command + O to open file in VSCode"
            :rules [:fork [:!To :!SOCo]]}

















































































      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Application switching
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Q + {key} to shift application"
      :rules [:q-mode 
      ;FireFox Work
            [:e "osascript -e 'tell application \"FF Work\" to activate'"]   
      ;Google Google Chrome Personal
            [:x "osascript -e 'tell application \"FF Personal\" to activate'"]
      ;Google VSCode
            [:w "osascript -e 'tell application \"VSCodium\" to activate'"]
      ;Google Fork
            [:left_command "osascript -e 'tell application \"kitty\" to activate\ntell application \"GitKraken\" to activate\ntell application \"kitty\" to activate'"]
      ;Google Dev
            [:d "osascript -e 'tell application \"Google Chrome Dev\" to activate'"]
      ;Google activate Slack
            [:caps_lock "osascript -e 'tell application \"Slack\" to activate'"]
      ;Google activate Google Chrome YouTube
            [:s "osascript -e 'tell application \"FF YouTube\" to activate'"]   
    ]}

      {:des "Press J / K / L / Ö to enter arrow mode"
      :rules [
            [:j nil ["arrow-mode" 0] {
                  :held  [["arrow-mode" 1] :left_arrow] :alone :j :params{:alone 200 :held 200}}]
            [:k nil ["arrow-mode" 0] {
                  :held  [["arrow-mode" 1] :down_arrow] :alone :k :params{:alone 200 :held 200}}]
            [:l nil ["arrow-mode" 0] {
                  :held  [["arrow-mode" 1] :up_arrow] :alone :l :params{:alone 200 :held 200}}]
            [:semicolon nil ["arrow-mode" 0] {
                  :held  [["arrow-mode" 1] :right_arrow] :alone :semicolon :params{:alone 200 :held 200}}]      
      :arrow-mode
            [:j :left_arrow]
            [:k :down_arrow]
            [:l :up_arrow]
            [:semicolon :right_arrow]
            [:!Rj :!Rleft_arrow]
            [:!Rk :!Rdown_arrow]
            [:!Rl :!Rup_arrow]
            [:!Rsemicolon :!Rright_arrow]
            [:!CTOj :!Oleft_arrow]
            [:!CTOk [:down_arrow :down_arrow :down_arrow :down_arrow :down_arrow]]
            [:!CTOl [:up_arrow :up_arrow :up_arrow :up_arrow :up_arrow]]
            [:!CTOsemicolon :!Oright_arrow]
            [:!Oj :home]
            [:!Ok :page_down]
            [:!Ol :page_up]
            [:!Osemicolon :end]
            [:q [:q ["arrow-mode" 0]]]
            [:w [:w ["arrow-mode" 0]]]
            [:e [:e ["arrow-mode" 0]]]
            [:r [:r ["arrow-mode" 0]]]
            [:t [:t ["arrow-mode" 0]]]
            [:y [:y ["arrow-mode" 0]]]
            [:u [:u ["arrow-mode" 0]]]
            [:i [:i ["arrow-mode" 0]]]
            [:o [:o ["arrow-mode" 0]]]
            [:p [:p ["arrow-mode" 0]]]
            [:a [:a ["arrow-mode" 0]]]
            [:s [:s ["arrow-mode" 0]]]
            [:d [:d ["arrow-mode" 0]]]
            [:f [:f ["arrow-mode" 0]]]
            [:g [:g ["arrow-mode" 0]]]
            [:h [:h ["arrow-mode" 0]]]
            [:z [:z ["arrow-mode" 0]]]
            [:x [:x ["arrow-mode" 0]]]
            [:c [:c ["arrow-mode" 0]]]
            [:v [:v ["arrow-mode" 0]]]
            [:b [:b ["arrow-mode" 0]]]
            [:n [:n ["arrow-mode" 0]]]
            [:m [:m ["arrow-mode" 0]]]
            [:0 [:0 ["arrow-mode" 0]]]
            [:1 [:1 ["arrow-mode" 0]]]
            [:2 [:2 ["arrow-mode" 0]]]
            [:3 [:3 ["arrow-mode" 0]]]
            [:4 [:4 ["arrow-mode" 0]]]
            [:5 [:5 ["arrow-mode" 0]]]
            [:6 [:6 ["arrow-mode" 0]]]
            [:7 [:7 ["arrow-mode" 0]]]
            [:8 [:8 ["arrow-mode" 0]]]
            [:9 [:9 ["arrow-mode" 0]]]
            [:left_arrow [:left_arrow ["arrow-mode" 0]]]
            [:right_arrow [:right_arrow ["arrow-mode" 0]]]
            [:up_arrow [:up_arrow ["arrow-mode" 0]]]
            [:down_arrow [:down_arrow ["arrow-mode" 0]]]
            [:left_command [ ["arrow-mode" 0] :left_control] nil {:alone [:escape ["arrow-mode" 0]]}]
            [:left_option [:delete_forward ["arrow-mode" 0]]]
            [:right_option [:delete_or_backspace ["arrow-mode" 0]]]
            [:left_control [:left_control ["arrow-mode" 0]]]
            [:right_control [:right_control ["arrow-mode" 0]]]
            [:comma [:comma ["arrow-mode" 0]]]
            [:period [:period ["arrow-mode" 0]]]
            [:quote [:quote ["arrow-mode" 0]]]
            [:open_bracket [:open_bracket ["arrow-mode" 0]]]
            [:close_bracket [:close_bracket ["arrow-mode" 0]]]
            [:slash [:slash ["arrow-mode" 0]]]
            [:backslash [:backslash ["arrow-mode" 0]]]
            [:hyphen [:hyphen ["arrow-mode" 0]]]
            [:equal_sign [:equal_sign ["arrow-mode" 0]]]
            [:grave_accent_and_tilde [:grave_accent_and_tilde ["arrow-mode" 0]]]
            [:return_or_enter [:return_or_enter ["arrow-mode" 0]]]
            [:tab [:tab ["arrow-mode" 0]]]
            [:delete_or_backspace [:delete_or_backspace ["arrow-mode" 0]]]
            [:caps_lock [:caps_lock ["arrow-mode" 0]]]
            [:escape [:escape ["arrow-mode" 0]]]
            [:right_shift :right_shift]
      ]}


                               ;;       {:des "long press Left Command + Left Shift + Backspace to empty recycle bin"
;;              :rules [[:!TSdelete_or_backspace nil nil {
;;             :held "osascript -e 'tell application \"Finder\" to empty trash'"}]]}

;;     {:des   "Press right_shift twice to enter double shift mode, press right_shift once to leave it"
;;                        :rules [[:right_shift ["double-right-shift-mode" 1] ["shift-pressed-once" 1]]
;;                                [:right_shift [:right_shift ["shift-pressed-once" 1]] ["double-right-shift-mode" 0] {:delayed {:invoked ["shift-pressed-once" 0] :canceled ["shift-pressed-once" 0]}}]
;;                                :double-right-shift-mode
;;                                [:right_shift ["double-right-shift-mode" 0]]
;;                                [:a "say 'know we are in double shift mode'"]]}

  

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Window positioning
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Command + Shift + Return: Maximize window"
            :rules [:!parallels[:!CSreturn_or_enter "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current maximized auto"]]} 
      {:des "Left Command + Shift + Arrow Up: Maximize window with no space around"
            :rules [:!parallels[:!CSup_arrow "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current maximized false"]]}  
      {:des "Left Command + Shift + Arrow Left: Position window to left half"
            :rules [:!parallels[:!CSleft_arrow "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current left-half auto"]]}  
      {:des "Left Command + Shift + Arrow Right: Position window to right half"
            :rules [:!parppallels[:!CSright_arrow "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current right-half auto"]]}  
      {:des "Left Command + Shift + Arrow Down: Position windows"
            :rules [:!parallels[:!CSdown_arrow "/Users/olof/dev/osandell/scripts-osx/eventscripts-helper/position-all-windows.sh"]]} 

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Misc          
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Option to Backspace"
            :rules[[:right_option :delete_or_backspace] [:!Tright_option :!Odelete_or_backspace]]}
      {:des "Left Command + Backspace to Left Option + Backspace"
            :rules[[:!Tdelete_or_backspace :!Odelete_or_backspace]]}
      {:des "Left Option to Delete"
            :rules[[:left_option :delete_forward]]}
      {:des "Caps Lock to Left Control + Shift if holding, to a if pressed alone"
            :rules[[:caps_lock :!SCOleft_control nil {:alone :g}]]}
      {:des "Caps Lock + Left Option to Shift + Left Control + d"
            :rules[[:!TCOSleft_option :!TSx]]}
      {:des "Left Command + Caps Lock to Left Control + Left Option, to alternate between the 2 most recent tabs if pressed alone"                           
            :rules [[:!Tcaps_lock :!Oleft_control nil {:alone :!Ttab}]]} 
      {:des "Caps Lock + Left Command to Left Control + Left Option"
            :rules[[:!TCOSleft_command :!Oleft_control]]}
      {:des "Caps Lock + Left Command to Left Control + Left Option"
            :rules[[:!TCOSleft_command :!Oleft_control]]}    
      {:des "Caps Lock + a to a, r"
            :rules[ [:!TCOSa [:g :a]] [:!TCOSs [:g :s]] [:!TCOSd [:g :d]] [:!TCOSf [:g :f]] 
            [:!TCOSj [:g :j]] [:!TCOSk [:g :k]] [:!TCOSl [:g :l]] [:!TCOSsemicolon [:g :semicolon]] [:!TCOSquote [:g :quote]]
            [:!TCOSq [:g :q]] [:!TCOSw [:g :w]] [:!TCOSe [:g :e]] [:!TCOSr [:g :r]] 
            [:!TCOSu [:g :u]] [:!TCOSi [:g :i]] [:!TCOSo [:g :o]] [:!TCOSp [:g :p]] [:!TCOSopen_bracket [:g :open_bracket]]
            [:!TCOSz [:g :z]] [:!TCOSx [:g :x]] [:!TCOSc [:g :c]] [:!TCOSv [:g :v]] 
            [:!TCOSm [:g :m]] [:!TCOScomma [:g :comma]] [:!TCOSperiod [:g :period]] [:!TCOSslash [:g :slash]] [:!TCOSright_shift [:g :n]]
      ]}
      {:des "Esc to Caps Lock"
            :rules[[:##escape :caps_lock]]}
      {:des "Shift + Left Option to delete row"
            :rules[[:!Sleft_option :!STx]]}
            {:des "Left Shift to Left Shift if holdeing, to ä if pressed alone"
            :rules[[:left_shift :left_shift nil {:alone :b}]]}
            {:des "Right Shift to Right Shift if holding, to - if pressed alone"
            :rules[[:right_shift :right_shift nil {:alone :n}]]}
            {:des "Left Shift + Right Shift to Ä"
            :rules[[:!Sright_shift :!Sn]]}
      {:des "Right Shift + Left Shift to _"
            :rules[[:!Rleft_shift :!Sb]]}
      {:des "Tab to Right Control if holding, to q if pressed alone"
            :rules[[:tab :right_control nil {:alone :t}]  [:!Stab :!St] [:!Rtab :!St]]}
      {:des "Right Command to Left Command + Left Option + Left Control, to Spacebar if pressed alone"
            :rules [[:right_command :!COleft_control nil {:alone :spacebar}]]}
      {:des "Left Command + Right Command to Special 1, to Open command palette if pressed alone"
            :rules [[:!Tright_command :!COleft_control nil {:alone :!Te}]]}
      {:des "Spacebar to Special 3 (WE) if holding, to Tab if pressed alone"    
               :rules[[:!Ttab :!Eright_control nil {:alone :!Ttab}]]}
        


      {:des "Left Command + Spacebar to Special 2, to open spotlight if pressed alone"
            :rules [[:!Tspacebar :!COleft_shift nil {:alone  :!Cspacebar}]]}
      {:des "Left Command to Left Control, to Escape if pressed alone"
            :rules [:!parallels[:left_command :left_control nil {:alone :escape}]]}
      {:des "Spacebar to Left Option if holding, to Tab if pressed alone"    
               :rules[[:spacebar :left_option nil {:alone :tab}]]}
      {:des "Right Command to Spacebar"        
            :rules [[:!Oleft_shift :!Ov]]} 
      {:des "Tab + Caps Lock to Right Control + Left Shift"        
            :rules [[:!Wcaps_lock :!Wleft_shift]]} 
      {:des "Left Command + S to Copy"
            :rules [[:!Ts :!Cz]]} 
      {:des "Left Command + D to Paste"
            :rules [[:!Td :!Cc]]} 

 {:des "Left Command + A to Cut"
:rules [[:!Ta :!Cgrave_accent_and_tilde]]} 

 {:des "Left Command + C to Mark All"
:rules [[:!Tc :!Cg]]} 

   {:des "Left Command + W to Step Back"
:rules [[:!Tw :!Cb]]}    


 {:des "Left Command + E to Step Forward"
:rules [[:!Te :!CSb]]}   

 {:des "Left Command + F to Find"
:rules [[:!CTOw :!Cw]]} 


      {:des "Q to App Switcher Hotkey, to Q if pressed alone"    
               :rules[[:q :!WEright_shift nil {:alone :q}]]}

      {:des "Left Command + h / j / k / l to arrow keys"
            :rules [[:!T##j :left_arrow] [:!Tk :down_arrow] [:!Tl :up_arrow] [:!T##semicolon :right_arrow]]} 
 
 {:des "Left Command + h / j / k / l + Caps Lock 5x to arrow keys"
            :rules [[:!TOk [:down_arrow :down_arrow :down_arrow :down_arrow :down_arrow] ] [:!TOl [:up_arrow :up_arrow :up_arrow :up_arrow :up_arrow]] ]} 

 {:des "Left Command + h / j / k / l + Caps Lock + Shift + to 25x Shift + Arrow keys"
            :rules [[:!WEk  [
            :down_arrow :down_arrow :down_arrow :down_arrow :down_arrow
            :down_arrow :down_arrow :down_arrow :down_arrow :down_arrow
            :down_arrow :down_arrow :down_arrow :down_arrow :down_arrow
            :down_arrow :down_arrow :down_arrow :down_arrow :down_arrow
            :down_arrow :down_arrow :down_arrow :down_arrow :down_arrow
            ] ] 
            [:!WEl [
                  :up_arrow :up_arrow :up_arrow :up_arrow :up_arrow
                  :up_arrow :up_arrow :up_arrow :up_arrow :up_arrow
                  :up_arrow :up_arrow :up_arrow :up_arrow :up_arrow
                  :up_arrow :up_arrow :up_arrow :up_arrow :up_arrow
                  :up_arrow :up_arrow :up_arrow :up_arrow :up_arrow
            ]] 
            ]} 

 {:des "Left Command + h / j / k / l + Caps Lock + Shift + to 5x Shift + Arrow keys"
            :rules [[:!TROk [:!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow] ] [:!TROl [:!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow]] ]} 


 {:des "Left Command + h / j / k / l + Caps Lock + Shift + to 25x Shift + Arrow keys"
            :rules [[:!WREk  [
            :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow
            :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow
            :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow
            :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow
            :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow :!Sdown_arrow
            ] ] 
            [:!WREl [
                  :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow
                  :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow
                  :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow
                  :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow
                  :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow :!Sup_arrow
            ]] 
            ]} 

 {:des "Left Command + h / j / k / l + Shift to Shift + Arrow keys"
            :rules [[:!TRk [:!Sdown_arrow ] ] [:!TRl [:!Sup_arrow ]] [:!TSk [:!Sdown_arrow ] ] [:!TSl [:!Sup_arrow ]]]} 






;;  {:des "Left Command + Caps Lock to Left Control + Left Option, to save if pressed alone"                           
;; :rules [[:!Tcaps_lock :!Oleft_control nil {:alone :!Cs

 {:des "Left Command + Q to Save"
:rules [[:!Tq :!Cs]]} 
 
    {:des "Left Command +  to App Switching"
            :rules [[:non_us_backslash  :!Ctab]]}

    {:des "§ to App Switching"
            :rules [[:non_us_backslash  :!Ctab]]}
    {:des "Left Command + § to Switch window within app"
            :rules [[:!Tnon_us_backslash  :!SOWtab]]}


{:des "Left Command + O to Open"
:rules [[:!To :!Cquote]]} 


 {:des "- to Right Option if holding, to . if pressed alone"    
      :rules[[:slash :right_option nil {:alone :slash}]  [:!Rslash :!Rright_option nil {:alone :!Rslash}]]}


{:des "Left Command + O to Open"
:rules [[:!Otab :!Ot]]} 

{:des "Left Command + 2 to Close tab"
:rules [[:!T2 :!Cq]]} 


{:des "Map T, Y, and B to 1, 2 and 0"
:rules [[:t :y] [:y :h] [:b :v]]} 



    ;;   {:des "< to Left Shift if holding, to ab when pressed alone"
    ;;         :rules [[:##grave_accent_and_tilde :left_shift nil {:alone :tab}]]}
    ;;   {:des "Dash to Shift when holding, dash when tapping"
    ;;         :rules [[:slash :right_shift nil {:alone :slash}]]}
      ;; {:des "F to Left Shift if holding, to F when pressed alone"
      ;;       :rules [[:##f :left_shift nil {:alone :f}]]}   f
      ;; {:des "F to Left Shift if holding, to F when pressed alone"
      ;;       :rules[[:jf :f]]}
       
      ;; {:des "J to Left Shift if holding, to J when pressed alone"
      ;;       :rules [[:##j :right_shift nil {:alone :j}]]}
      ;; {:des "Map the number keys to F1, F2, etc.. when Caps Lock is active or Option is pressed"
      ;;       :rules [[:88!P1 :f1] [:!O1 :f1] [:!E1 :f1] [:!P2 :f2] [:!O2 :f2] [:!E2 :f2] [:!P3 :f3] [:!O3 :f3] [:!E3 :f3]
      ;;       [:!P4 :f4] [:!O4 :f4] [:!E4 :f4] [:!P5 :f5] [:!O5 :f5] [:!E5 :f5] [:!P6 :f6] [:!O6 :f6] [:!E6 :f6]
      ;;       [:!P7 :f7] [:!O7 :f7] [:!E7 :f7] [:!P8 :f8] [:!O8 :f8] [:!E8 :f8] [:!P9 :f9] [:!O9 :f9] [:!E9 :f9]
      ;;       [:!P0 :f10] [:!O0 :f10] [:!E0 :f10] [:!Phyphen :f11] [:!Ohyphen :f11] [:!Ehyphen :f11]
      ;;       [:!Pequal_sign :f12] [:!Oequal_sign :f12] [:!Eequal_sign :f12]]}
    ;;   {:des "Caps Lock to Left Command if holding, Esc if pressed alone"
    ;;         :rules [:!parallels[:##caps_lock :left_control nil {:alone :escape}]]}
      {:des "Caps Lock to G"  
            :rules [:!parallels[:##caps_lock :g]]}
      ;; {:des "Esc to Tab when holding, Caps Lock when tapped"
      ;;       :rules [:!parallels[:##escape :right_control nil {:alone :caps_lock}]]}
      ;; {:des "Tab + q, 1, §, 2 and to mark all, copy, cut, paste, and save (used with esc as modifier)"
      ;;       :rules [:!parallels[:!Wq :!Ca] [:!W1 :!Cc] [:!Wnon_us_backslash  :!Cx] [:!W2 :!Cv] [:!W3 :!Cs]]}
      ;; {:des "Option + Shift + h/l to Option + Shift + left/right arrow - To highlight words more easily"
      ;;       :rules [[:!SOh :!SOleft_arrow] [:!SOl :!SOright_arrow]]} 
      ;; {:des "Left Command + n to go to beginning of the content of the line"
      ;;       :rules [[:!Tn :home]]}
      ;; {:des "Left Command + . to go to end of the line"
      ;;       :rules [[:!Tperiod :end]]}
      ;; {:des "Left Command + d to delete"
      ;;       :rules [[:!Td :delete_forward]]} 
      ;; {:des "Left Command + y to copy"
      ;;       :rules [[:!Ty :!Cc]]}
      ;; {:des "Left Command + u to undo"
      ;;       :rules [[:!Tz :!Cz]]}
      ;; {:des "Left Command + i / Left Command + y to redo"
      ;;       :rules [[:!Ti :!SCz] [:!Cy :!SCz]]}      
      ;; {:des "Left Command + Space to step to the right"
      ;;       :rules [[:!Tspacebar :right_arrow]]}
      ;; {:des "Left Command + Left Shift + Space to add a space to the right of the cursor"
      ;;       :rules [[:!STspacebar [:spacebar :left_arrow]]]}
      ;; {:des "§ to Delete"
      ;;       :rules [[:##non_us_backslash :delete_forward]]}
   

      ;; {:des "Right Shift to N"
      ;;       :rules [[:##right_shift :n]]}
      ;; {:des "Make the - key mapping correctly when holding Left Shift + Left Option (Ukelele didn't work)"
      ;;       :rules [[:!SOslash :slash]]}
      ;; {:des "Make enter unblocked when holding Left Shift + Left Option"
      ;;       :rules [[:!SOreturn_or_enter :return_or_enter]]}
      ;; {:des "Move tabs left / right with Tab + h / l"
      ;;       :rules [:!parallels[:!Wh :!COleft_arrow], [:!Wl :!COright_arrow]]}
      ;; {:des "New tab with Tab + t"
      ;;       :rules [:!parallels[:!Wt :!Ct]]}
      {:des "Close tab with Tab + w"

            :rules [:!parallels[:!Ww :!Cq]]}
      ;; {:des "Left Shift + Left Option + d to print today's date" :rules
      ;;       [[:!SOd "osascript -e '
      ;;       set {year:yr, month:mn, day:dy} to (current date)
      ;;       set dateString to (yr as text) & \"-\" & pad(mn as integer) & \"-\" & pad(dy)

      ;;       on pad(v)
      ;;             return text -2 thru -1 of ((v + 100) as text)
      ;;       end pad


      ;;       tell application \"System Events\"
      ;;             keystroke dateString
      ;;       end tell
      ;;       '"]]}
    
      ;; {:des "Tab + M to minimize window"
      ;;       :rules [:!parallels[:!Wm :!Cm]]}
      ;; {:des "Tab + f to go to fullscreen"
      ;;       :rules [:!parallels[:!Wf "osascript -e '
      ;;       tell application \"System Events\"
      ;;             tell (first process where it is frontmost)
      ;;                   if value of attribute \"AXFullScreen\" of window 1 = false then
      ;;                         set value of attribute \"AXFullScreen\" of window 1 to true
      ;;                   else
      ;;                         set value 
      ;;                         of attribute \"AXFullScreen\" of window 1 to false
      ;;                   end if
      ;;             end tell
      ;;       end tell
      ;;       '"]]}
;;       {:des "Option + ä to Shift + '+' key in order for ? hotkey to work in Vimium"
;;             :rules [[:!Oquote :!Shyphen] [:!Equote :!Shyphen]]}
;;       {:des "¨ to Shift + '7' key in order for / hotkey to work in Vimium"
;;             :rules [[:close_bracket :!S7]]}
;;      ; {:des "Left Command + - / Ö / Å / Ä to select all / copy / cut / paste"
;;      ;       :rules [[:!Tslash :!Ca] [:!Tsemicolon :!Cc] [:!Topen_bracket :!Cx] [:!Tquote :!Cv]]}
;;       {:des "Left Command + m to click minimize button (fix: normal hotkey doesn't work with every app, for example VSCode)"
;;             :rules [[:!Cm "osascript -e '
;;             tell application p\"System Events\"
;;                   click (first button whose subrole is \"AXMinimizeButton\") of (first window whose subrole is \"AXStandardWindow\") of (first process whose frontmost is true)
;;             end tell
;;             '"]]}
;;       {:des "long press Left Command + Left Shift + Backspace to empty recycle bin"
;;             :rules [[:!TSdelete_or_backspace nil nil {
;;             :held "osascript -e 'tell application \"Finder\" to empty trash'"}]]}
;;       {:des "Left Command + Backspace to delete a word at a time instead of Option + Backspace"
;;             :rules [:!parallels [:!Tdelete_or_backspace :!Odelete_or_backspace] [:!Odelete_or_backspace :delete_or_backspace]]}
      
      
      ; Global letter hotkeys
      {:des "Left Command + O to Open"
            :rules [[:!Rright_command :!CTOright_shift]]} 
      {:des "Left Command + Shift + F: Check if we have synced all repos to GitHub"
            :rules [[:!CTORf "~/dev/osandell/scripts-osx/git/check-if-repos-are-pushed.sh"]]} 



      {:des "Long press Left Command + Left Shift +  to switch to colemak dh keyboard mapping"
            :rules [[:6 nil nil {
            :alone :6
            :held "~/dev/osandell/scripts-osx/keyboard-mapping/switch-to-colemak-dh.sh"}]]}
      {:des "Long press 7 to switch to new qwerty keyboard mapping"
            :rules [[:7 nil nil {
            :alone :7
            :held "~/dev/osandell/scripts-osx/keyboard-mapping/switch-to-qwerty.sh"}]]}
      {:des "Long press 8 to switch to old qwerty keyboard mapping"
            :rules [[:8 nil nil {
            :alone :8         
            :held "~/dev/osandell/scripts-osx/keyboard-mapping/switch-to-qwerty-old.sh"}]]}

]}

