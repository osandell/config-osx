
;; !  | mandatory - this modifier HAS to be pressed for binding to be valid
;; !! | mandatory command + control + optional + shift (hyper)
;; #  | optional - binding will be valid also if a specified modifier is pressed simultaniously
;;    | For example: ':#Ca :b' will bind a to b if a is pressed alone, or if a is pressed together with Command
;; ## | optional any - binding will be valid also if any modifier is pressed simultaniously
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;; 
;; Example how to map both ALONE and DOUBLE to the same button with custom delay setting. In the example we can also alternate between two apps when single pressing:
;;  {:des "Left Control + 2 ALONE: activate VSCode | DOUBLE: activate iTerm and Fork"
;;             :rules [:vscode
;;             [:!T2 ["osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'" ["lctrl_2_twice" 0]] ["lctrl_2_twice" 1]]
;;             [:!T2 ["lctrl_2_twice" 1] ["lctrl_2_twice" 0]
;;             {:delayed {:invoked ["osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'" ["lctrl_2_twice" 0]] :canceled ["lctrl_2_twice" 0]} :params {:delay 200} }]]}
;; 
;;    {:des "Left Control + 2 ALONE: activate VSCode | DOUBLE: activate iTerm and Fork"
;;             :rules [
;;             [:!T2 ["osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'" ["lctrl_2_twice" 0]] ["lctrl_2_twice" 1]]
;;             [:!T2 ["lctrl_2_twice" 1] ["lctrl_2_twice" 0]
;;             {:delayed {:invoked ["osascript -e 'tell application \"Code\" to activate'" ["lctrl_2_twice" 0]] :canceled ["lctrl_2_twice" 0]} :params {:delay 200} }]]}

;; Define different kinds of keyboards
{
:devices {
      ;; Internal MacBook Pro 16" 2021 keyboard
      :kb-macbook [{:vendor_id 1452, :product_id 832 }]

      ;; Logitech K860 Ergo keyboard
      :kb-logitech-k860 [{:vendor_id 1133, :product_id 45913 }]
}

;; Make key bindings valid only in specified applications
:applications {
      :chrome ["com.google.Chrome"]
      :edge ["com.microsoft.edgemac"]
      :fork ["com.DanPristupov.Fork"]
      :iterm ["com.googlecode.iterm2"]
      :parallels ["com.parallels"]
      :remote-desktop ["com.microsoft.rdc.macos"]
      :slack ["com.tinyspeck.slackmacgap"]
      :vscode ["com.microsoft.VSCode"]

}

:profiles  {:Default {:default true :sim 50 :delay 500 :alone 500 :held 500}}


;; :layers {
;;       :f-mode {:key :f :condi [["d-mode" 0] ["j-mode" 0] ["k-mode" 0]]} 
;;       :j-mode {:key :j :condi [["d-mode" 0] ["f-mode" 0] ["k-mode" 0]]} 
;;       :d-mode {:key :d :condi [["f-mode" 0] ["j-mode" 0] ["k-mode" 0]]} 
;;       :k-mode {:key :k :condi [["d-mode" 0] ["f-mode" 0] ["j-mode" 0]]} 
;; }



;; :simlayers {
      ;; :d-mode {:key :d}
;; }


:main [
;;       {:des "Hold D to simulate shift"
;;             :rules [:d-mode 
;;                   [:q :!Sq]     
;;                   [:w :!Sw]  
;;                   [:e :!Se]
;;                   [:r :!Sr]  
;;                   [:t :!St]
;;                   [:a :!Sa] 
;;                   [:s :!Ss] 
;;                   [:d :!Sd]
;;                   [:g :!Sg]
;;                   [:z :!Sz]
;;                   [:x :!Sx]
;;                   [:c :!Sc]
;;                   [:v :!Sv] 
;;                   [:b :!Sb] 
;;                   [:y :!Sy]     
;;                   [:u :!Su]  
;;                   [:i :!Si]
;;                   [:o :!So]  
;;                   [:p :!Sp]
;;                   [:open_bracket :!Sopen_bracket ] 
;;                   [:h :!Sh] 
;;                   [:j :!Sj]
;;                   [:k :!Sk] 
;;                   [:l :!Sl]
;;                   [:semicolon :!Ssemicolon]
;;                   [:quote :!Squote]
;;                   [:n :!Sn]
;;                   [:m :!Sm] 
;;     ]}

;;       {:des "Hold K to simulate shift"
;;             :rules [:k-mode
;;                   [:q :!Sq]     
;;                   [:w :!Sw]  
;;                   [:e :!Se]
;;                   [:r :!Sr]  
;;                   [:t :!St]
;;                   [:a :!Sa] 
;;                   [:s :!Ss] 
;;                   [:d :!Sd]
;;                   [:f :!Sf] 
;;                   [:g :!Sg]
;;                   [:z :!Sz]
;;                   [:x :!Sx]
;;                   [:c :!Sc]
;;                   [:v :!Sv] 
;;                   [:b :!Sb] 
;;                   [:y :!Sy]     
;;                   [:u :!Su]  
;;                   [:i :!Si]
;;                   [:o :!So]  
;;                   [:p :!Sp]
;;                   [:open_bracket :!Sopen_bracket ] 
;;                   [:h :!Sh] 
;;                   [:k :!Sk] 
;;                   [:l :!Sl]
;;                   [:semicolon :!Ssemicolon]
;;                   [:quote :!Squote]
;;                   [:n :!Sn]
;;                   [:m :!Sm] 
;;     ]}

    

;;        {:des "Hold F for various hotkeys"
;;         :rules [:f-mode

;;           [  :h :left_arrow   ]     
;;               [:j :down_arrow  ]
;;              [:k :up_arrow]  
;;               [:l :right_arrow]  
;;     ]}


      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Bindings for specific keyboards
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      ; MacBook Pro internal keyboard    
      {:des "Function + ^ to Page Up"
            :rules[:kb-macbook[:!F##close_bracket :page_up]]}
      {:des "Function + ' to Page Down"
            :rules[:kb-macbook[:!F##backslash :page_down]]}
      {:des "FN to Left Command"
            :rules [:kb-macbook :!parallels[:##fn :left_command]]}
      {:des "Left Control to FN"
            :rules [:kb-macbook[:##left_control :fn]]}

      ; Logitech K860
      {:des "Media key with 3 squares to mission control"
            :rules[:kb-logitech-k860[:!Cup_arrow :!Tup_arrow]]}
      {:des "Show desktop media key (require changing hotkey in mac system settings). Not supposed to work when
            Caps Lock is active so that we can use the f11 key in Chrome debug tool."
            :rules[:kb-logitech-k860[:f11 :!TSOd]]}
      {:des "Left Control to Left Command"
            :rules [:kb-logitech-k860 :!parallels[:##left_control :left_command]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Media + Brighness Control
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Shift + Left to rewind media" :rules
            [[:!Rleft_arrow "osascript ~/dev/osandell/scripts-osx/media-playback-control/rewind.applescript"]]
      }
      {:des "Right Shift + Right to fast forward media" :rules
            [[:!Rright_arrow "osascript ~/dev/osandell/scripts-osx/media-playback-control/forward.applescript"]]
      }
      {:des "Right Shift + Up to raise volume" 
            :rules [[:!Rup_arrow :volume_increment]]}
      {:des "Right Shift + Down to lower volume" 
            :rules [[:!Rdown_arrow :volume_decrement]]
      }
      {:des "Right Shift + - to play / pause media"
            :rules [[:!Rslash "osascript ~/dev/osandell/scripts-osx/media-playback-control/play_pause.applescript"]]}
      {:des "Left Shift + Up to increase brighness"
            :rules [[:!Sup_arrow :display_brightness_increment]]}
      {:des "Left Shift + Down to decrease brightness" 
            :rules [[:!Sdown_arrow :display_brightness_decrement]]
      }

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Focus To-Do
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Control + Left Shift + p to play / pause | skip in Focus-to-do"
            :rules [:!parallels[:!TSp nil nil {:alone "osascript ~/dev/osandell/scripts-osx/focus-to-do/pause.applescript"
            :held "osascript ~/dev/osandell/scripts-osx/focus-to-do/next.applescript"}]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Notification center
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Control + Left Shift + c to close all notifications | snooze 1 notification"
            :rules[[:!TSc nil nil {:alone "osascript ~/dev/osandell/scripts-osx/notification-center/close-notifications.applescript"
            :held "osascript ~/dev/osandell/scripts-osx/notification-center/snooze-notification.applescript"}]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Remote Desktop
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Make modifier keys work properly on remote desktop"
            :rules [:remote-desktop[:left_command :left_control] [:left_control :left_command]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Parallels Desktop
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Tweak modifier keys to work smoothly on Window"
            :rules [:parallels[:left_option :left_command] 
                   [:fn :left_control]
                   [:left_command :right_option nil {:alone :left_option}]
                   [:right_command :right_option]
                   ]}

      {:des "Caps Lock to Right Command (WIN in Windows)"
            :rules [:parallels[:caps_lock :right_control]]}
      
      {:des "Make Left Alt act as Left Alt (not Right Alt) when pressing up/down key to be able to map it in VSCode"
            :rules [:parallels[:!Eup_arrow :!Oup_arrow] [:!Edown_arrow :!Odown_arrow] 
            [:!ESup_arrow :!OSup_arrow] [:!ESdown_arrow [:!OSdown_arrow ]]]}

      ;; This way we can use Caps Lock + e.g E to get to the Mac Dev Browser 
      {:des "Left Control + Q: activate Google Chrome Grebban"
            :rules [:parallels[:!Wq "osascript -e 'tell application \"Google Chrome Grebban\" to activate'"]]}
      {:des "Left Control + 1: activate Google Chrome Personal"
            :rules [:parallels[:!W1 "osascript -e 'tell application \"Google Chrome Personal\" to activate'"]]}
      {:des "Left Control + 2: activate iTerm + Fork"
            :rules [:parallels[:!W2 "osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'"]]}
      {:des "Left Control + e: activate Google Chrome Dev"
            :rules [:parallels[:!We "osascript -e 'tell application \"Google Chrome Dev\" to activate'"]]}
      {:des "Left Control + 3: activate Slack"
            :rules [:parallels[:!W3 "osascript -e 'tell application \"Slack\" to activate'"]]}
      {:des "Left Control + 4: activate Google Chrome YouTube"
            :rules [:parallels[:!W4"osascript -e 'tell application \"Google Chrome YouTube\" to activate'"]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Google Chrome
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Control + u to enter url in address bar"
            :rules [:chrome[:!Tu :!Cl]]}

      {:des "Right Control + plus-key to duplicate tab"
            :rules [:chrome[:!Whyphen "osascript ~/dev/osandell/scripts-osx/chrome/duplicate-tab.applescript"]]}
            
      ;; For notion.so
      {:des "Right Control + b to make text bold"
            :rules [:chrome[:!Wb :!Cb]]}
      {:des "Right Control + i to make text italic"
            :rules [:chrome[:!Wi :!Ci]]}
      {:des "Right Control + u to underline text"
            :rules [:chrome[:!Wu :!Cu]]}
      {:des "Right Control + m to highlight text"
            :rules [:chrome[:!Wm :!Ce]]}
      {:des "Right Control + c to create code block"
            :rules [:chrome[:!Wc [:!S7 :c :o :d :e :return_or_enter ]]]}
            
      {:des "Left Control + r to hard reload"
            :rules [:chrome[:!Tr :!CSr]]}
            
      {:des "Right Option + Right Shift + t to open Toggl tab"
            :rules [:chrome[:!ERt "osascript ~/dev/osandell/scripts-osx/chrome/toggl.applescript"]]}

      {:des "Right Option + Right Shift + n to open Notion tab"
            :rules [:chrome[:!ERn "osascript ~/dev/osandell/scripts-osx/chrome/notion.applescript"]]}

      {:des "Right Option + Right Shift + j to open Jira tab"
            :rules [:chrome[:!ERj "osascript ~/dev/osandell/scripts-osx/chrome/jira.applescript"]]}

      {:des "Right Option + Right Shift + b to open Bitbucket tab"
            :rules [:chrome[:!ERb "osascript ~/dev/osandell/scripts-osx/chrome/bitbucket.applescript"]]}

      {:des "Right Option + Right Shift + a to open Azure tab"
            :rules [:chrome[:!ERa "osascript ~/dev/osandell/scripts-osx/chrome/azure.applescript"]]}

      {:des "Right Option + Right Shift + c to open calendar tab"
            :rules [:chrome[:!ERc "osascript ~/dev/osandell/scripts-osx/chrome/calendar.applescript"]]}

      {:des "Right Option + Right Shift + m to open mail tab"
            :rules [:chrome[:!ERm "osascript ~/dev/osandell/scripts-osx/chrome/mail.applescript"]]}

      {:des "Right Control + n to switch to prev developer pane"
            :rules [:chrome[:!Wn :!Copen_bracket]]}
   
      {:des "Right Control + . to switch to next developer pane"
            :rules [:chrome[:!Wperiod :!Cgrave_accent_and_tilde]]}

      {:des "Left Control + i to toggle inspector"
            :rules [:chrome[:!Ti :!CEi]]}

      {:des "Left Control + m to toggle desktop / mobile"
            :rules [:chrome[:!Tm [:!CSc :!CSc :!CSm]]]}

      {:des "Left Control + c to toggle element inspector"
            :rules [:chrome[:!Tc :!CSc]]}

      {:des "Right Option + Right Shift + d to focus dev tools"
            :rules [:chrome[:!ERd [:!CSc :!CSc]]]}

      {:des "Right Option + Right Shift + v to focus viewport"
            :rules [:chrome[:!ERv [:!Cl :!COdown_arrow]]]}

      {:des "Left Option + Tab to alternate between 2 tabs (need Recent Tabs extension)"
            :rules [:chrome[:!Otab :!Tq]]}

      {:des "Left Command + Left Shift + J to switch javascrtipt on / off"
            :rules [:chrome[:!SCj [:!SO1 :!Cr]]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Slack
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Control + K to open Grebban workspace"
            :rules [:slack[:!Tk :!C1]]}

      {:des "Right Control + J to open Royal workspace"
            :rules [:slack[:!Tj :!C2]]}

      {:des "Right Option + Right Shift + f to find thread"
            :rules [:slack[:!ERf :!Ck]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; VSCode
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Control + Left Shift + r to run last used terminal command"
            :rules [:vscode[:!TSr nil nil {:alone "osascript ~/dev/osandell/scripts-osx/vscode/rerun-last-command.applescript"
            :held "osascript ~/dev/osandell/scripts-osx/vscode/rerun-second-last-command.applescript"}]]}
      {:des "Left Control + r to reload Chrome Dev"
            :rules [:vscode[:!Tr "osascript -e '
            tell application \"Google Chrome Dev\" to activate
            delay 0.5
            tell application \"System Events\" to key code 15 using {command down, shift down}
            tell application \"Code\" to activate
            '"]]}


      ; For the following 2 definitions to work I've also mapped ° and ˝ to
      ; melodies in VSCode VIM.
      {:des "Left Control + , to console log without variable"
            :rules [:vscode[:!Tcomma :!SEq]]}
      {:des "Left Control + m to console log with variable"
            :rules [:vscode[:!Tm :!SEw]]}
      {:des "Left Option + tab to alternate between the 2 most recent tabs"
            :rules [:vscode[:!Otab :!Ttab]]}
      {:des "Left Control + a to stage selected area"
            :rules [:vscode[:!Ta [:!Ck :!COs]]]}
      {:des "Left Shift + Left Control + a to revert selected changes"
            :rules [:vscode[:!STa [:!Ck :!Cr]]]}
      {:des "Right Control + w to Close all tab if held / Close current tab if tapped"
            :rules [:vscode[:!Ww nil nil {:alone :!Cw
            :held [:!ERe :!Ck :!Cw]}]]}
      {:des "Left Control + c to terminate process"
            :rules [:vscode[:!Tc "osascript -e '
            tell application \"System Events\" to key code 8 using control down
            delay 0.5
            tell application \"System Events\" to key code 8 using control down
            '"]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; iTerm
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Control + K / J to focus split pane above / below"
            :rules [:iterm[:!Wk :!OCup_arrow] [:!Wj :!OCdown_arrow]]}

      ;; At first I remapped keypad 7 and 8 to [ and ] and remapped Left Control + H /
      ;; L to keypad 7 and 8. It worked fine for iTerm, however for some strange
      ;; reason I couln't get it to work in Chrome when focusing tabs in the dev tools
      ;; pane to the left / right. I had to revert to remapping < key on the SE
      ;; keyboard to ] again for it to work in Chrome. Not sure why that is. It's also
      ;; strange that a reverse problem occurs in iTerm. Here I can't use the Å button
      ;; on the SE keyboard for moving to the left in iTerm, despite this key
      ;; registering as "open_bracket" in Karabiner Event Listener and it works as
      ;; expected in Chrome. So what I've ended up with is a remap of the < key to ]
      ;; for it to work in Chrome, and I've remapped keypad_7 to [ and keypad_8 to ]
      ;; for it to work in iTerm. Not very consistent but at least it works.
      {:des "Right Control + H / L to focus tab to the left / right"
            :rules [:iterm[:!Wh [:!SCkeypad_7 "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 48 using {control down, shift down}
            tell application \"iTerm\" to activate
            '"]] 
            [:!Wl [:!SCgrave_accent_and_tilde "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 48 using control down
            tell application \"iTerm\" to activate
            '"]]]}
      {:des "Keypad 7 to 7 in order for it to work as expected, given the Ukelele remap explained above"
            :rules [[:keypad_7 :7]]}
      {:des "Left Control + Shift + J / K to move down / up in Fork"
            :rules [:iterm [:!TSj "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 125
            tell application \"iTerm\" to activate
            '"] 
            [:!TSk "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 126
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Shift + Right Option + I to view branch info in Fork"
            :rules [:iterm[:!ERi "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 18 using {command down, option down}
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Shift + Right Option + C to view branch changes in Fork"
            :rules [:iterm[:!ERc "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 19 using {command down, option down}
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Shift + Right Option + F to view branch file tree in Fork"
            :rules [:iterm [:!ERf "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 20 using {command down, option down}
            tell application \"iTerm\" to activate
            '"]]}
      {:des "Right Control + - to split horizontally"
            :rules [:iterm[:!Wslash :!SCd]]}
      {:des "Right Control + t to open new tab and split horizontally"
            :rules [:iterm[:!Wt [:!Ct :!SCd "osascript -e '
           tell application \"System Events\" to key code 126 using {command down, option down}
            '"]]]}
      {:des "Right Control + w to close tab group"
            :rules [:iterm[:!Ww [:!Cw :!Cw "osascript -e '
            tell application \"Fork\" to activate
            tell application \"System Events\" to key code 13 using {command down}
            tell application \"iTerm\" to activate
            '"]]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Fork
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Control + H / L to focus tab to the left / right"
            :rules [:fork [:!Th [:!STtab "osascript -e '
            tell application \"iTerm\" to activate
            tell application \"System Events\" to key code 89 using {command down, shift down}
            tell application \"Fork\" to activate
            '"]] 
            [:!Tl [:!Ttab "osascript -e '
            tell application \"iTerm\" to activate
            tell application \"System Events\" to key code 50 using {command down, shift down}
            tell application \"Fork\" to activate
            '"]]]}
      {:des "Left Control + J / K to move down / up"
            :rules [:fork [:!Tj [:down_arrow "osascript -e '
            tell application \"iTerm\" to activate
            '"]] 
            [:!Tk [:up_arrow "osascript -e '
            tell application \"iTerm\" to activate
            '"]]]} 
      {:des "Right Shift + Right Option + I to view branch info"
            :rules [:fork [:!ERi :!CO1]]}
      {:des "Right Shift + Right Option + C to view branch changes"
            :rules [:fork [:!ERc :!CO2]]}
      {:des "Right Shift + Right Option + F to view branch file tree"
            :rules [:fork [:!ERf :!CO3]]}
      {:des "Left Control + O to open file in VSCode"
            :rules [:fork [:!To :!SOCo]]}

















































































      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Application switching
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Control + Q: activate Google Chrome Grebban"
            :rules [[:!Tq "osascript -e 'tell application \"Google Chrome Grebban\" to activate'"]]}
      {:des "Left Control + 1: activate Google Chrome Personal"
            :rules [[:!T1 "osascript -e 'tell application \"Google Chrome Personal\" to activate'"]]}
      {:des "Left Control + w: activate VSCode"
            :rules [[:!Tw "osascript ~/dev/osandell/scripts-osx/keyboard-mapping/launch_vscode_or_visual_studio.applescript"]]}
      {:des "Left Control + 2: activate iTerm + Fork"
            :rules [[:!T2 "osascript -e 'tell application \"iTerm\" to activate\ndelay 0.3\ntell application \"Fork\" to activate\ntell application \"iTerm\" to activate'"]]}
      {:des "Left Control + e: activate Google Chrome Dev"
            :rules [[:!Te "osascript -e 'tell application \"Google Chrome Dev\" to activate'"]]}
      {:des "Left Control + 3: activate Slack"
            :rules [[:!T3 "osascript -e 'tell application \"Slack\" to activate'"]]}
      {:des "Left Control + 4: activate Google Chrome YouTube"
            :rules [[:!T4"osascript -e 'tell application \"Google Chrome YouTube\" to activate'"]]}

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Window positioning
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Left Command + Shift + Return: Maximize window"
            :rules [:!parallels[:!CSreturn_or_enter "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current maximized auto"]]} 
      {:des "Left Command + Shift + Arrow Up: Maximize window with no space around"
            :rules [:!parallels[:!CSup_arrow "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current maximized false"]]}  
      {:des "Left Command + Shift + Arrow Left: Position window to left half"
            :rules [:!parallels[:!CSleft_arrow "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current left-half auto"]]}  
      {:des "Left Command + Shift + Arrow Right: Position window to right half"
            :rules [:!parallels[:!CSright_arrow "osascript ~/dev/osandell/set-window-boundaries/set-window-boundaries.applescript frontmost current right-half auto"]]}  
      {:des "Left Command + Shift + Arrow Down: Position windows"
            :rules [:!parallels[:!CSdown_arrow "/Users/olof/dev/osandell/scripts-osx/eventscripts-helper/position-all-windows.sh"]]} 

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Misc
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      {:des "Right Command to Right Option"
            :rules [[:##right_command :right_option]]}
      {:des "Left Command to Left Option"
            :rules [:!parallels[:##left_command :left_option]]}
      {:des "Left Option to FN if holding, to Spotlight Search if pressed alone"
            :rules [:!parallels[:##left_option :fn nil {:alone :!Cspacebar}]]}
      {:des "Right Option to Right Command"
            :rules[[:##right_option :right_command]]}
      {:des "< to Left Shift if holding, to tab when pressed alone"
            :rules [[:##grave_accent_and_tilde :left_shift nil {:alone :tab}]]}
      {:des "Dash to Right Shift when holding, dash when tapping"
            :rules [[:slash :right_shift nil {:alone :slash}]]}
      ;; {:des "F to Left Shift if holding, to F when pressed alone"
      ;;       :rules [[:##f :left_shift nil {:alone :f}]]}   f
      ;; {:des "F to Left Shift if holding, to F when pressed alone"
      ;;       :rules[[:jf :f]]}
      ;; {:des "J to Left Shift if holding, to J when pressed alone"
      ;;       :rules [[:##j :right_shift nil {:alone :j}]]}
      {:des "Map the number keys to F1, F2, etc.. when Caps Lock is active or Option is pressed"
            :rules [[:!P1 :f1] [:!O1 :f1] [:!E1 :f1] [:!P2 :f2] [:!O2 :f2] [:!E2 :f2] [:!P3 :f3] [:!O3 :f3] [:!E3 :f3]
            [:!P4 :f4] [:!O4 :f4] [:!E4 :f4] [:!P5 :f5] [:!O5 :f5] [:!E5 :f5] [:!P6 :f6] [:!O6 :f6] [:!E6 :f6]
            [:!P7 :f7] [:!O7 :f7] [:!E7 :f7] [:!P8 :f8] [:!O8 :f8] [:!E8 :f8] [:!P9 :f9] [:!O9 :f9] [:!E9 :f9]
            [:!P0 :f10] [:!O0 :f10] [:!E0 :f10] [:!Phyphen :f11] [:!Ohyphen :f11] [:!Ehyphen :f11]
            [:!Pequal_sign :f12] [:!Oequal_sign :f12] [:!Eequal_sign :f12]]}
       {:des "Caps Lock to Left Control if holding, Esc if pressed alone"
             :rules [:!parallels[:##caps_lock :left_control nil {:alone :escape}]]}

      {:des "Esc to Right Control when holding, Caps Lock when tapped"
            :rules [:!parallels[:##escape :right_control nil {:alone :caps_lock}]]}
      {:des "Right Control + q, 1, §, 2 and to mark all, copy, cut, paste, and save (used with esc as modifier)"
            :rules [:!parallels[:!Wq :!Ca] [:!W1 :!Cc] [:!Wnon_us_backslash  :!Cx] [:!W2 :!Cv] [:!W3 :!Cs]]}
      {:des "Option + Shift + h/l to Option + Shift + left/right arrow - To highlight words more easily"
            :rules [[:!SOh :!SOleft_arrow] [:!SOl :!SOright_arrow]]} 
      {:des "Left Control + n to go to beginning of the content of the line"
            :rules [[:!Tn :home]]}
      {:des "Left Control + . to go to end of the line"
            :rules [[:!Tperiod :end]]}
      {:des "Left Control + d to delete"
            :rules [[:!Td :delete_forward]]} 
      {:des "Left Control + y to copy"
            :rules [[:!Ty :!Cc]]}
      {:des "Left Control + u to undo"
            :rules [[:!Tz :!Cz]]}
      {:des "Left Control + i / Left Command + y to redo"
            :rules [[:!Ti :!SCz] [:!Cy :!SCz]]}      
      {:des "Left Control + Space to step to the right"
            :rules [[:!Tspacebar :right_arrow]]}
      {:des "Left Control + Left Shift + Space to add a space to the right of the cursor"
            :rules [[:!STspacebar [:spacebar :left_arrow]]]}
      {:des "§ to Delete"
            :rules [[:##non_us_backslash :delete_forward]]}
      {:des "Tab to Right Control if held App Switching if tapped"
            :rules [[:tab :right_control nil {:alone :!Ctab}]]}
      {:des "Within app window switching with Function + Tab"
            :rules [[:!Ftab :!SOWtab]]}
      {:des "Make the - key mapping correctly when holding Left Shift + Left Option (Ukelele didn't work)"
            :rules [[:!SOslash :slash]]}
      {:des "Make enter unblocked when holding Left Shift + Left Option"
            :rules [[:!SOreturn_or_enter :return_or_enter]]}
      {:des "Move tabs left / right with Right Control + h / l"
            :rules [:!parallels[:!Wh :!COleft_arrow], [:!Wl :!COright_arrow]]}
      {:des "New tab with Right Control + t"
            :rules [:!parallels[:!Wt :!Ct]]}
      {:des "Close tab with Right Control + w"
            :rules [:!parallels[:!Ww :!Cw]]}
      {:des "Left Shift + Left Option + d to print today's date" :rules
            [[:!SOd "osascript -e '
            set {year:yr, month:mn, day:dy} to (current date)
            set dateString to (yr as text) & \"-\" & pad(mn as integer) & \"-\" & pad(dy)

            on pad(v)
                  return text -2 thru -1 of ((v + 100) as text)
            end pad

            tell application \"System Events\"
                  keystroke dateString
            end tell
            '"]]}
      {:des "Left Control + h / j / k / l to arrow keys"
            :rules [[:!T##h :left_arrow] [:!T##j :down_arrow] [:!T##k :up_arrow] [:!T##l :right_arrow]]}
      {:des "Right Control + M to minimize window"
            :rules [:!parallels[:!Wm :!Cm]]}
      {:des "Right Control + f to go to fullscreen"
            :rules [:!parallels[:!Wf "osascript -e '
            tell application \"System Events\"
                  tell (first process where it is frontmost)
                        if value of attribute \"AXFullScreen\" of window 1 = false then
                              set value of attribute \"AXFullScreen\" of window 1 to true
                        else
                              set value of attribute \"AXFullScreen\" of window 1 to false
                        end if
                  end tell
            end tell
            '"]]}
      {:des "Option + ä to Shift + '+' key in order for ? hotkey to work in Vimium"
            :rules [[:!Oquote :!Shyphen] [:!Equote :!Shyphen]]}
      {:des "¨ to Shift + '7' key in order for / hotkey to work in Vimium"
            :rules [[:close_bracket :!S7]]}
      {:des "Left Control + - / Ö / Å / Ä to select all / copy / cut / paste"
            :rules [[:!Tslash :!Ca] [:!Tsemicolon :!Cc] [:!Topen_bracket :!Cx] [:!Tquote :!Cv]]}
      {:des "Left Command + m to click minimize button (fix: normal hotkey doesn't work with every app, for example VSCode)"
            :rules [[:!Cm "osascript -e '
            tell application \"System Events\"
                  click (first button whose subrole is \"AXMinimizeButton\") of (first window whose subrole is \"AXStandardWindow\") of (first process whose frontmost is true)
            end tell
            '"]]}
      {:des "long press Left Control + Left Shift + Backspace to empty recycle bin"
            :rules [[:!TSdelete_or_backspace nil nil {
            :held "osascript -e 'tell application \"Finder\" to empty trash'"}]]}
      {:des "Left Control + Backspace to delete a word at a time instead of Option + Backspace"
            :rules [:!parallels [:!Tdelete_or_backspace :!Odelete_or_backspace] [:!Odelete_or_backspace :delete_or_backspace]]}
      {:des "Left Control + Shift + G: Check if we have synced all repos to GitHub"
            :rules [[:!TSg "~/dev/osandell/scripts-osx/git/check-if-repos-are-pushed.sh"]]} 
      {:des "´ to switch to rsthd keyboard mapping"
            :rules [[:equal_sign "~/dev/osandell/scripts-osx/keyboard-mapping/switch-to-rsthd.sh"]]}      
      {:des "Right Control + Space: Spotlight"
            :rules [:!parallels[:!Wspacebar :!Cspacebar]]} 
]}

